{"version":3,"sources":["repl.js","Channel.js","Landing.js","LogHandler.js","HydraComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","eval","arg","callback","self","jsString","isError","e","Channel","props","state","code","log","handleChange","bind","onKeyPressed","addToLog","onLogClick","onChannelClick","handleSubmit","this","on","index","msg","setState","concat","repl","history","length","setTimeout","codeInput","focus","console","prevProps","prevState","messagesEnd","scrollIntoView","behavior","event","target","value","user","date","Date","now","channel","color","appendToLog","contents","val","preventDefault","onKeyDown","onMouseDown","className","map","el","key","style","float","clear","ref","onSubmit","autoFocus","input","type","placeholder","onChange","React","Component","Landing","userInput","closeIntro","borderColor","updateUser","io","require","LogHandler","server","window","location","hostname","signaller","emit","EventEmitter","HydraComponent","dome","hydraCanvas","width","innerWidth","height","innerHeight","hydra","Hydra","canvas","channels","forEach","snapshot","zIndex","element","App","showLanding","Math","random","componentWillMount","logs","channelHistory","ch","filter","reverse","inner","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5545b31b.chunk.js","sourcesContent":["//const log = require('./log.js').log\n\nmodule.exports = {\n  eval: (arg, callback) => {\n    var self = this\n    var jsString = arg\n    var isError = false\n    try {\n      eval(jsString)\n    //  log(jsString)\n    } catch (e) {\n      isError = true\n    //  console.log(\"logging\", e.message)\n    //  log(e.message, \"log-error\")\n      //console.log('ERROR', JSON.stringify(e))\n    }\n  //  console.log('callback is', callback)\n    if(callback) callback(jsString, isError)\n  }\n}\n","import React from 'react';\nimport repl from './repl.js'\n\nexport default class Channel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: '',\n      log: []\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onKeyPressed = this.onKeyPressed.bind(this);\n    this.addToLog = this.addToLog.bind(this);\n    this.onLogClick = this.onLogClick.bind(this)\n    this.onChannelClick = this.onChannelClick.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  componentDidMount() {\n    this.props.log.on(`append${this.props.index}`, (msg) => {\n    //  console.log('RECEIVED MESSAGE', msg)\n      this.setState({\n        log: this.state.log.concat(msg)\n      })\n      repl.eval(`${msg.code}.out(o${this.props.index})`)\n    })\n     // Call our fetch function below once the component mounts\n   // this.callBackendAPI()\n   //   .then(res => console.log(res))\n   //   .catch(err => console.log(err));\n   if(this.props.history.length > 0) {\n     repl.eval(`${this.props.history[this.props.history.length - 1].code}.out(o${this.props.index})`)\n\n   }\n   setTimeout( () => {\n     this.codeInput.focus()\n     console.log('focusing input')\n   }, 1000)\n }\n\n componentDidUpdate(prevProps, prevState) {\n   console.log('update')\n   this.messagesEnd.scrollIntoView({ behavior: \"smooth\" })\n  //setTimeout(() => this.codeInput.focus(), 100)\n  }\n\n //  callBackendAPI = async () => {\n //   const response = await fetch('/ping');\n //   const body = await response.json();\n //\n //   if (response.status !== 200) {\n //     throw Error(body.message)\n //   }\n //   return body;\n // };\n\n  handleChange(event) {\n    this.setState({code: event.target.value})\n  }\n\n\n  addToLog() {\n  //  console.log(code)\n    var msg = { user: this.props.user, code: this.state.code, date: Date.now(), channel: this.props.index, color: this.props.color}\n    this.setState({\n      log: this.state.log.concat(msg)\n    })\n    repl.eval(`${msg.code}.out(o${this.props.index})`)\n    this.props.log.appendToLog(msg)\n  }\n\n  onLogClick(contents, val) {\n  //  console.log(contents, val, 'TRIGGERED CLICK', this.codeInput)\n   this.setState({code: contents.code})\n  //  setTimeout( () => this.codeInput.focus(), 200)\n  }\n\n  onChannelClick() {\n    console.log('channel click')\n    setTimeout(() => this.codeInput.focus(), 100)\n  }\n\n  onKeyPressed(e) {\n    // console.log(e)\n    //   this.codeInput.focus()\n    // if (e.keyCode === 13) {\n    //   this.addToLog()\n    // //  if (e.ctrlKey) this.addToLog()\n    // //  if (e.altKey) this.addToLog()\n    // }\n    // console.log(e.ctrlKey, e.keyCode);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault()\n    this.addToLog()\n  }\n//<span>.out({this.props.name})</span>\n  render() {\n    return (\n      <div onKeyDown={this.onKeyPressed} onMouseDown={this.onChannelClick} className=\"w-1/3 h-full flex\">\n        <div className =\"h-56 p-4 pt-8 bg-black self-end w-full break-all\">\n          <div className=\"h-40 overflow-y-auto\">\n          {this.props.history.map((el, index) =>\n            <div className=\"text-sm\" key={index} onMouseDown={this.onLogClick.bind(null, el)}>\n               <span style={{color: el.color}}>{el.user}: </span>{el.code}\n           </div> )}\n             {this.state.log.map((el, index) =>\n               <div className=\"text-sm\" key={index} onMouseDown={this.onLogClick.bind(null, el)}>\n                  <span style={{color: el.color}}>{el.user}: </span>{el.code}\n              </div> )}\n              <div style={{ float:\"left\", clear: \"both\" }} ref={(el) => { this.messagesEnd = el; }}>\n            </div>\n          </div>\n          <div className=\"flex\">\n            <span style={{color: this.props.color}} className=\"mr-3\"> {this.props.user}:</span>\n             <form onSubmit={this.handleSubmit}>\n             <input autoFocus\n               ref={(input) => { this.codeInput = input }}\n               className=\"bg-black font-mono\"\n               type=\"text\"\n               value={this.state.code}\n               placeholder='Type code here and press <Enter>'\n               onChange={this.handleChange} />\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// <input autoFocus\n//   ref={(input) => { this.codeInput = input }}\n//   className=\"bg-black font-mono\"\n//   type=\"text\"\n//   value={this.state.code}\n//   placeholder='Type code here and press Enter to edit buffer o0'\n//   onChange={this.handleChange} />\n//onMouseDown={this.onLogClick.bind(null, el)}\n","import React from 'react';\n\n//import Terminal from 'terminal-in-react';\nimport ReactTerminal from 'react-terminal-component';\n\nexport default class Landing extends React.Component {\n  // render() {\n  //   return (\n  //     <div  className=\"fixed w-full\">>\n  //       <ReactTerminal/>\n  //     </div>\n  //   );\n  // }\n  //state =\n\n//<span>.out({this.props.name})</span>\n\ncomponentDidUpdate(prevProps, prevState) {\n  console.log('update')\n this.userInput.focus()\n }\n\n componentDidMount(prevProps, prevState) {\n   console.log('update')\n  this.userInput.focus()\n  }\n  render() {\n    return (\n      <div className=\"fixed w-full h-full flex items-center justify-center h-screen\">\n        <div className=\"fixed bg-black p-16 w-2/3 \">\n           <div>WELCOME TO PIXELJAM</div>\n           <div>This is a collaborative REPL for hydra synth.</div>\n           <div>There are three channels or buffers that are changed by writing code in the text boxes beneath them.</div>\n           <div>Pressing 'Enter' executes the code.</div> \n           <form onSubmit={this.props.closeIntro}>\n             <div>\n                To join, enter your name:\n              </div>\n              <input autoFocus style={{borderColor: this.props.color}} ref={(input) => {this.userInput = input}} className=\"appearance-none border-solid border-2 border-white bg-black\" type=\"text\" value={this.props.user} onChange={this.props.updateUser} />\n\n              <div><input type=\"submit\" value=\"START\" /></div>\n            </form>\n        </div>\n      </div>\n    );\n  }\n\n// this.props.closeIntro\n  //   <span className=\"mr-4\" style={{color:this.props.color}}>$</span>\n  //    <span className=\"text-teal\">{this.props.user}$</span>\n  // showMsg = () => 'Hello World'\n  //\n  // render() {\n  //   return (\n  //     <div\n  //       style={{\n  //         display: \"flex\",\n  //         justifyContent: \"center\",\n  //         alignItems: \"center\",\n  //         height: \"100vh\"\n  //       }}\n  //     >\n  //       <Terminal watchConsoleLogging\n  //         color='green'\n  //         backgroundColor='black'\n  //         barColor='black'\n  //         style={{ fontWeight: \"bold\", fontSize: \"1em\" }}\n  //         commands={{\n  //           'open-google': () => window.open('https://www.google.com/', '_blank'),\n  //           showmsg: this.showMsg,\n  //           popup: () => alert('Terminal in React')\n  //         }}\n  //         descriptions={{\n  //           'open-google': 'opens google.com',\n  //           showmsg: 'shows a message',\n  //           alert: 'alert', popup: 'alert'\n  //         }}\n  //         msg='WELCOME TO PIXELJAM'\n  //       />\n  //     </div>\n  //   );\n  // }\n}\n","var io = require('socket.io-client')\nvar EventEmitter = require('events').EventEmitter\n\n\nexport default class LogHandler extends EventEmitter {\n  constructor() {\n    super()\n    let server = `https://${window.location.hostname}:8080`\n    this.signaller = io(server)\n\n   var self = this\n    this.signaller.on('ready', (msg) => {\n      console.log('received message', msg)\n    //  self.appendToLog('test')\n    })\n\n    // send all existing messagesr\n    this.signaller.on('log history', (msg) => {\n      self.emit('log history', msg)\n    //  self.appendToLog('test')\n    })\n\n    this.signaller.on('append', (msg) => {\n      console.log('received APPEND', msg)\n      self.emit(`append${msg.channel}`, msg)\n    //  self.appendToLog('test')\n    })\n\n  //  this.appendToLog('test')\n  }\n\n  appendToLog(msg) {\n    console.log(`append`, msg)\n    this.signaller.emit('append', msg)\n  }\n}\n\n//module.exports = LogHandler\n","import React from 'react'\n//import Hydra from 'hydra-synth'\nimport repl from './repl.js'\n\nexport default class HydraComponent extends React.Component {\n  constructor() {\n         super();\n         this.dome = null\n     }\n\n     componentDidMount () {\n       this.hydraCanvas.width = window.innerWidth\n       this.hydraCanvas.height = window.innerHeight\n       this.hydra  = new window.Hydra({\n          canvas: this.hydraCanvas\n        })\n        repl.eval(`render()`)\n        this.props.channels.forEach((history, index) => {\n          if(history.length > 0) {\n            repl.eval(`${history[history.length - 1].code}.out(o${index})`)\n          }\n        })\n       // this.dome = Dome(this.threeRootElement)\n       // this.dome.triggerAnimation(5, this.props.domeState)\n     }\n     componentDidUpdate(prevProps, prevState, snapshot) {\n       // console.log('comp did update', prevProps, this.props)\n       // if(prevProps.domeState !== this.props.domeState) {\n       //   this.dome.triggerAnimation(5, this.props.domeState)\n       // }\n     }\n\n     render() {\n\n         return (\n             <canvas className=\"fixed pin-t pin-l w-full h-full\" style={{zIndex:0}} ref={element => this.hydraCanvas = element} />\n         );\n     }\n }\n","import React from 'react';\nimport Channel from './Channel.js'\nimport Landing from './Landing.js'\nimport LogHandler from './LogHandler.js'\nimport Hydra from './HydraComponent.js'\nimport repl from './repl.js'\n\n\nexport default class App extends React.Component {\n  state = {\n    user: '',\n    showLanding: true,\n    color: `rgb(${Math.random()*255}, ${Math.random()*255}, ${Math.random()*255})`,\n    channels: [ [], [], [] ]\n  };\n\n//  handle\n\n// handleClick = buttonName => {\n// //  this.setState(calculate(this.state, buttonName));\n// };,\n\ncomponentWillMount = () => {\n  this.log = new LogHandler()\n  this.log.on('log history', (logs) => {\n  //  console.log('got history', logs)\n    let channelHistory = this.state.channels.map( (ch, index) => logs.filter((el) => el.channel===index).reverse())\n     console.log('LOG HISTORY', channelHistory)\n    this.setState({ channels: channelHistory })\n    channelHistory.forEach((history, index) => {\n      if(history.length > 0) {\n        repl.eval(`${history[history.length - 1].code}.out(o${index})`)\n      }\n    })\n  })\n//  this.log.appendToLog('TESTING')\n}\n\ncloseIntro = () => {\n  this.setState({ showLanding: false})\n}\n\nupdateUser = e => { this.setState({ user: e.target.value})}\n\nrender() {\n  console.log('log is', this.log)\n  let inner = null\n  if (this.state.showLanding) {\n    inner = <Landing user={this.state.user} closeIntro={this.closeIntro} updateUser={this.updateUser} color={this.state.color}/>\n  } else {\n    inner =  <div className=\"flex fixed h-full bottom-0 w-full\">\n         {this.state.channels.map((channel, index) => <Channel history={channel} key={index} index={index} user={this.state.user} color={this.state.color} log={this.log}/>)}\n      </div>\n  }\n  return <div className = \"main bg-black text-white font-mono h-screen w-screen\">\n      <Hydra channels= {this.state.channels}/>\n      {inner}\n    </div>\n}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/tailwind.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}